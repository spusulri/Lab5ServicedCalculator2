//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestCalculations.Calculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Calculator.Calculator_ASMXSoap")]
    public interface Calculator_ASMXSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add", ReplyAction="*")]
        double Add(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add", ReplyAction="*")]
        System.Threading.Tasks.Task<double> AddAsync(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Subtrct", ReplyAction="*")]
        double Subtrct(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Subtrct", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SubtrctAsync(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiply", ReplyAction="*")]
        double Multiply(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiply", ReplyAction="*")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Divide", ReplyAction="*")]
        double Divide(double f1, double f2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Divide", ReplyAction="*")]
        System.Threading.Tasks.Task<double> DivideAsync(double f1, double f2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Calculator_ASMXSoapChannel : TestCalculations.Calculator.Calculator_ASMXSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Calculator_ASMXSoapClient : System.ServiceModel.ClientBase<TestCalculations.Calculator.Calculator_ASMXSoap>, TestCalculations.Calculator.Calculator_ASMXSoap {
        
        public Calculator_ASMXSoapClient() {
        }
        
        public Calculator_ASMXSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Calculator_ASMXSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Calculator_ASMXSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Calculator_ASMXSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double f1, double f2) {
            return base.Channel.Add(f1, f2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double f1, double f2) {
            return base.Channel.AddAsync(f1, f2);
        }
        
        public double Subtrct(double f1, double f2) {
            return base.Channel.Subtrct(f1, f2);
        }
        
        public System.Threading.Tasks.Task<double> SubtrctAsync(double f1, double f2) {
            return base.Channel.SubtrctAsync(f1, f2);
        }
        
        public double Multiply(double f1, double f2) {
            return base.Channel.Multiply(f1, f2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double f1, double f2) {
            return base.Channel.MultiplyAsync(f1, f2);
        }
        
        public double Divide(double f1, double f2) {
            return base.Channel.Divide(f1, f2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double f1, double f2) {
            return base.Channel.DivideAsync(f1, f2);
        }
    }
}
